!function(e){var t={};function n(i){if(t[i])return t[i].exports;var s=t[i]={i:i,l:!1,exports:{}};return e[i].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)n.d(i,s,function(t){return e[t]}.bind(null,s));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=3)}([function(e,t){e.exports=jQuery},function(e,t,n){(function(e){function n(e,t){for(var n=0,i=e.length-1;i>=0;i--){var s=e[i];"."===s?e.splice(i,1):".."===s?(e.splice(i,1),n++):n&&(e.splice(i,1),n--)}if(t)for(;n--;n)e.unshift("..");return e}function i(e,t){if(e.filter)return e.filter(t);for(var n=[],i=0;i<e.length;i++)t(e[i],i,e)&&n.push(e[i]);return n}t.resolve=function(){for(var t="",s=!1,a=arguments.length-1;a>=-1&&!s;a--){var r=a>=0?arguments[a]:e.cwd();if("string"!=typeof r)throw new TypeError("Arguments to path.resolve must be strings");r&&(t=r+"/"+t,s="/"===r.charAt(0))}return(s?"/":"")+(t=n(i(t.split("/"),(function(e){return!!e})),!s).join("/"))||"."},t.normalize=function(e){var a=t.isAbsolute(e),r="/"===s(e,-1);return(e=n(i(e.split("/"),(function(e){return!!e})),!a).join("/"))||a||(e="."),e&&r&&(e+="/"),(a?"/":"")+e},t.isAbsolute=function(e){return"/"===e.charAt(0)},t.join=function(){var e=Array.prototype.slice.call(arguments,0);return t.normalize(i(e,(function(e,t){if("string"!=typeof e)throw new TypeError("Arguments to path.join must be strings");return e})).join("/"))},t.relative=function(e,n){function i(e){for(var t=0;t<e.length&&""===e[t];t++);for(var n=e.length-1;n>=0&&""===e[n];n--);return t>n?[]:e.slice(t,n-t+1)}e=t.resolve(e).substr(1),n=t.resolve(n).substr(1);for(var s=i(e.split("/")),a=i(n.split("/")),r=Math.min(s.length,a.length),o=r,c=0;c<r;c++)if(s[c]!==a[c]){o=c;break}var l=[];for(c=o;c<s.length;c++)l.push("..");return(l=l.concat(a.slice(o))).join("/")},t.sep="/",t.delimiter=":",t.dirname=function(e){if("string"!=typeof e&&(e+=""),0===e.length)return".";for(var t=e.charCodeAt(0),n=47===t,i=-1,s=!0,a=e.length-1;a>=1;--a)if(47===(t=e.charCodeAt(a))){if(!s){i=a;break}}else s=!1;return-1===i?n?"/":".":n&&1===i?"/":e.slice(0,i)},t.basename=function(e,t){var n=function(e){"string"!=typeof e&&(e+="");var t,n=0,i=-1,s=!0;for(t=e.length-1;t>=0;--t)if(47===e.charCodeAt(t)){if(!s){n=t+1;break}}else-1===i&&(s=!1,i=t+1);return-1===i?"":e.slice(n,i)}(e);return t&&n.substr(-1*t.length)===t&&(n=n.substr(0,n.length-t.length)),n},t.extname=function(e){"string"!=typeof e&&(e+="");for(var t=-1,n=0,i=-1,s=!0,a=0,r=e.length-1;r>=0;--r){var o=e.charCodeAt(r);if(47!==o)-1===i&&(s=!1,i=r+1),46===o?-1===t?t=r:1!==a&&(a=1):-1!==t&&(a=-1);else if(!s){n=r+1;break}}return-1===t||-1===i||0===a||1===a&&t===i-1&&t===n+1?"":e.slice(t,i)};var s="b"==="ab".substr(-1)?function(e,t,n){return e.substr(t,n)}:function(e,t,n){return t<0&&(t=e.length+t),e.substr(t,n)}}).call(this,n(2))},function(e,t){var n,i,s=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function o(e){if(n===setTimeout)return setTimeout(e,0);if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(e){n=a}try{i="function"==typeof clearTimeout?clearTimeout:r}catch(e){i=r}}();var c,l=[],d=!1,u=-1;function p(){d&&c&&(d=!1,c.length?l=c.concat(l):u=-1,l.length&&f())}function f(){if(!d){var e=o(p);d=!0;for(var t=l.length;t;){for(c=l,l=[];++u<t;)c&&c[u].run();u=-1,t=l.length}c=null,d=!1,function(e){if(i===clearTimeout)return clearTimeout(e);if((i===r||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(e);try{i(e)}catch(t){try{return i.call(null,e)}catch(t){return i.call(this,e)}}}(e)}}function m(e,t){this.fun=e,this.array=t}function h(){}s.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new m(e,t)),1!==l.length||d||o(f)},m.prototype.run=function(){this.fun.apply(null,this.array)},s.title="browser",s.browser=!0,s.env={},s.argv=[],s.version="",s.versions={},s.on=h,s.addListener=h,s.once=h,s.off=h,s.removeListener=h,s.removeAllListeners=h,s.emit=h,s.prependListener=h,s.prependOnceListener=h,s.listeners=function(e){return[]},s.binding=function(e){throw new Error("process.binding is not supported")},s.cwd=function(){return"/"},s.chdir=function(e){throw new Error("process.chdir is not supported")},s.umask=function(){return 0}},function(e,t,n){"use strict";n.r(t);var i=n(0),s=n.n(i),a=n(1),r=n.n(a),o=(e,t,n)=>i=>{var s=i.responseText||i;e(`could not find "${n}" in "${t}": ${s}`)},c=(e,t)=>{var n=r.a.dirname(t),i=r.a.basename(t);return new Promise((a,r)=>{var c=o(r,e,t);s.a.getJSON(`/api/v1/${e}/folders/by_path/${n}`).fail(c).done(t=>{var n=t[t.length-1].id;s.a.getJSON(`/api/v1/${e}/files`,{"only[]":"names",search_term:i}).fail(c).done(e=>{var t=e.find(e=>e.folder_id==n);t?s.a.getJSON(`/api/v1/files/${t.id}/public_url`).fail(c).done(e=>{s.a.get(e.public_url).fail(c).done(a)}):c("search returned empty array")})})})},l=(e,t,n)=>{var i=`/api/v1/${e}/files`,a={name:r.a.basename(t),content_type:"text/plain",on_duplicate:"overwrite",parent_folder_path:r.a.dirname(t)};return new Promise((r,c)=>{var l=o(c,e,t);s.a.post(i,a).fail(l).done(e=>{var t=new FormData;for(var i in e.upload_params)t.append(i,e.upload_params[i]);t.append("file",new Blob([n],{type:"text/plain"})),s.a.ajax({type:"POST",data:t,failure:l,processData:!1,contentType:!1,url:e.upload_url,success:r})})})};const d=[],u=(e,t={})=>{const n={},i=d.map(i=>i.bind(n)(e,t));return n.cancel=()=>{i.forEach(e=>e())},n};u.addModule=e=>d.push(e);var p=u;p.addModule((function(e,t){const n=[],i=new ResizeObserver(e=>{e.forEach(e=>{for(const t of n)for(let n of t.nodes)if(e.target==n&&0==t.callback(n,e)){s(t);break}})}),s=e=>{const t=n.indexOf(e);t>-1&&(e.mutationMonitor.cancel(),n.splice(t,1),e.nodes.forEach(e=>{n.every(t=>{t.nodes.indexOf(e)})&&i.unobserve(e)}))};return this.resized=(e,t)=>{const a=[],r=this.added(e,e=>{a.push(e),i.observe(e)});return o={nodes:a,selector:e,callback:t,mutationMonitor:r},n.push(o),{cancel:()=>s(o)};var o},()=>{i.disconnect(),n.splice(0,n.length)}})),p.addModule((function(e,t){const n=[],i=new MutationObserver(e=>{e.forEach(e=>{for(const t of n)for(let n of t.nodes(e))if(n.matches&&n.matches(t.selector)&&0==t.callback(n,e)){r(t);break}})}),s=e=>{try{return Boolean(e.contentDocument)}catch(e){return console.log(e),!1}},a=a=>(n.push(a),1==n.length&&(t.iframes&&this.added("iframe",e=>((e,t)=>{if(s(e)){const n="about:blank",i=e.src.trim(),a=e.contentWindow.location.href,r="complete"===e.contentDocument.readyState,o=()=>{s(e)&&t(e.contentDocument),e.removeEventListener("load",o)};r?a===n&&i!==n&&""!==i?e.addEventListener("load",o):t(e.contentDocument):e.addEventListener("load",o)}})(e,e=>i.observe(e,{subtree:!0,childList:!0}))),i.observe(e,{subtree:!0,childList:!0})),{cancel:()=>r(a)}),r=e=>{const t=n.indexOf(e);t>-1&&n.splice(t,1),0==n.length&&i.disconnect()};return this.added=(n,i,{existing:r=!0}={})=>{if(r){const a=[e];if(t.iframes)for(let t of e.querySelectorAll("iframe"))s(t)&&a.push(t.contentDocument);for(let e of a)for(let t of e.querySelectorAll(n))if(!1===i(t,null))return{cancel:()=>{}}}return a({selector:n,callback:i,nodes:e=>e.addedNodes})},this.removed=(e,t)=>a({selector:e,callback:t,nodes:e=>e.removedNodes}),()=>{i.disconnect(),n.splice(0,n.length)}})),p.addModule((function(e,t){const n=[],i=new IntersectionObserver(e=>{e.forEach(e=>{for(const t of n)for(let n of t.nodes)if(e.target==n&&t.entryTest(e)&&0==t.callback(n,e)){s(t);break}})}),s=e=>{const t=n.indexOf(e);t>-1&&(e.mutationMonitor.cancel(),n.splice(t,1),e.nodes.forEach(e=>{n.every(t=>{t.nodes.indexOf(e)})&&i.unobserve(e)}))},a=(e,t,a)=>{const r=[],o=this.added(e,e=>{r.push(e),i.observe(e)});return c={nodes:r,selector:e,callback:t,mutationMonitor:o,entryTest:a},n.push(c),{cancel:()=>s(c)};var c};return this.appeared=(e,t)=>a(e,t,e=>e.isIntersecting),this.disappeared=(e,t)=>a(e,t,e=>!e.isIntersecting),()=>{i.disconnect(),n.splice(0,n.length)}}));var f=p;window.monitoring=f,f(document).added("#content",e=>(console.log("loading gadget support ..."),(e=>{const t=f(e);t.added(".question_holder",e=>{f(e).added("select.question_type",e=>{const t=$(e).closest(".question").find(".question_content"),n=$("<option value='essay_question'>Gadget Question</option>");return null!=t.val().match("<div[^<]+gadget[^<]+>")&&n.attr("selected",!0),$(e).append(n).change(()=>{"Gadget Question"==$(e).find("option:selected").text()&&c("courses/"+ENV.COURSE_ID,"templates/quiz.gadget").then(e=>{tinymce.get(t.attr("id")).rceWrapper.insert_code(e)})}),!1})}),t.added(".mce-tinymce",e=>{const t=$("<div>",{role:"button",class:"mce-widget mce-btn"}).append($("<button>",{role:"presentation",type:"button"}).append($("<i>").addClass("mce-ico mce-i-none").css("background-image","url('https://i.imgur.com/V88UPuK.png')")));t.click(()=>{let t="templates/student.gadget";const n=ENV.current_user_roles;$(e).closest(".question").length?t="templates/quiz.gadget":(n.includes("teacher")||n.includes("admin"))&&(t="templates/teacher.gadget"),c("courses/"+ENV.COURSE_ID,t).then(e=>tinymce.activeEditor.rceWrapper.insert_code(e))}),$(e).find(".mce-btn:has(.mce-i-rtl)").remove(),$(e).find(".mce-btn:has(.mce-i-ltr)").replaceWith(t)})})(e),((e,t)=>{console.log("gadget renderer ready");const n=f(e,{iframes:!0});n.resized("div.gadget",(e,t)=>{if(e.config&&e.config.iframeElement){const n=s()(e).offset();s()(e.config.iframeElement).css({"z-index":10,top:n.top,left:n.left,width:t.contentRect.width,height:t.contentRect.height})}}),n.appeared("div.gadget",e=>{if(e.config)s()(e.config.iframeElement).show(),s()(e.config.iframeElement).css({"z-index":10});else{e.config={};const n=s()("<iframe>",{frameborder:0,marginwidth:0,marginheight:0,class:"gadget",allowfullscreen:!0});s()(e).children().hide(),s()(e).css({height:350,width:"100%",margin:0}).show();const i=s()(e).offset();n.css({"z-index":10,top:i.top,left:i.left,position:"absolute",width:s()(e).css("width"),height:s()(e).css("height")});const a=n[0];a.gadget=e,e.config.iframeElement=a,t(e,()=>{e.ownerDocument.documentElement.appendChild(a),a.contentDocument.open("text/htmlreplace"),a.contentDocument.write('<!DOCTYPE html>\n<html lang="en" class="no-js">\n<head>\n    <meta charset="utf-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    \n    <base href="https://usma-eecs.github.io/gadget/" />\n\n    <link rel="stylesheet" type="text/css" href="css/embed.css">\n    <link rel="stylesheet" type="text/css" href="libs/highlight.js/8.0/styles/github.min.css">\n    <link rel="stylesheet" type="text/css" href="libs/font-awesome/4.7.0/css/font-awesome.min.css">\n\n    <script src=\'libs/jszip/3.1.4/dist/jszip.min.js\'><\/script>\n    <script src=\'libs/jsdiff/1.0.8/diff.js\'><\/script>\n    <script src="libs/modernizr/2.8.2/modernizr.min.js" type="text/javascript"><\/script>\n    <script src="libs/detectizr/dist/detectizr.min.js" type="text/javascript"><\/script>\n    <script src="libs/crypto-js/3.1.2/rollups/md5.js" type="text/javascript"><\/script>\n    <script type="text/javascript" src="libs/diff_match_patch/20121119/diff_match_patch.js"><\/script>\n</head>\n\n<body id="embed_content_python" data-no-metrics="false" data-assignment="false" data-view-only="false" class="mode-standard remixable" data-is-mobile="false">\n    <div id="wrapper" class="off-canvas-wrap owner-view row" data-offcanvas>\n        <div class="gadget-wrapper inner-wrap">\n            <nav id="menu" class="gadget-header " data-interface="top-menu">\n                <section class="mode-toolbar left" data-mode="interact" role="menubar">\n                    <div class="icon-bar label-right">\n                        <a class="edit-it menu-button item allow-original show-for-small-only" data-action="code.edit" title="Edit the code.">\n                            <i class="fa fa-pencil"></i>\n                            <label class="show-for-large-up">Code</label>\n                        </a>\n                      \n                        <a class="button run-it menu-button item split allow-original" data-action="code.run" title="View the result." role="button" aria-label="Run Button" tabindex="0">\n                            <i class="fa fa-play"></i>\n                            <label class="show-for-large-up">Run</label>\n                            <span data-dropdown="run-options" data-options="align:bottom" role="menu"></span>\n                        </a>\n\n                        <a class="check-it menu-button item allow-original hide" data-action="code.check" title="Check your code." tabindex="0">\n                            <i class="fa fa-check-circle"></i>\n                            <label class="show-for-large-up">Check</label>\n                        </a>\n\n                        <a class="button fullscreen-it menu-button item allow-original" data-action="mode.fullscreen" role="button" aria-label="Fullscreen" tabindex="0">\n                            <i class="fa fa-expand"></i>\n                            <label class="show-for-large-up">Fullscreen</label>\n                        </a>\n\n                        <a class="button reset-it menu-button item allow-original hide" data-action="code.reset" role="button" aria-label="Reset" tabindex="0">\n                            <i class="fa fa-refresh"></i>\n                            <label class="show-for-large-up">Reset</label>\n                        </a>\n\n                        <a class=\'menu-button font-size item allow-original\' data-action="code.fontsize" onclick="var swap=$(this).data(\'data\'); $(this).data(\'data\',$(this).data(\'last\')); $(this).data(\'last\',swap)" data-last="2em" data-data="1em">\n                          aA\n                          <label class="show-for-large-up">Font</label>\n                        </a>\n                    </div>\n                </section>\n                <section class="mode-indicator right">\n                  <div class="icon-bar">\n                    <div class="item"><div id="draftMessage" class="hide draft-message"></div></div>\n                    \x3c!-- user, has remix, viewing remix --\x3e\n                    <a title="Save changes" class="save-it menu-button allow-original item blue-highlight disabled hide" data-action="menu.upgrade">\n                      <i class="fa fa-save"></i>\n                      <label class="show-for-medium-up">Saved</label>\n                    </a>\n\n                  </div>\n                </section>\n            </nav>\n\n            <section class="gadget-content main-section" data-interface="content">\n                <div id="flashMessage" class="container hide">\n                    <div id="flashContent"></div>\n                </div>\n                <div class="gadget-content-wrapper " role="main">\n                    <div id="content-overlay" class="hide" data-interface="overlay"></div>\n                    \x3c!-- autorun: code / result / check --\x3e\n                    <input id="start-value" type=\'hidden\' value=\'code\' />\n                    \x3c!-- console / result --\x3e\n                    <input id="runMode-value" type=\'hidden\' value=\'\' />\n                    <input id="runOption-value" type=\'hidden\' value=\'run\' />\n                  \n                    <div id="modules" class="hide" data-interface="overlay">\n                        <a class="menu-button closer" data-action="code.modules" data-data="close"><i class="fa fa-times-circle-o"></i></a>\n                    </div>\n                  \n                    <div id="editor" class="code-editor hide" data-interface="editor"></div>\n\n                    <div id="dragbar"></div>\n\n                    <div id="codeOutput" class="codeOutput hide" data-interface="output">\n\n                        \x3c!-- when hiding instructions: hideInstructions --\x3e\n                        <div id="outputTabs" class="">\n                            <div class="active menu-button" id="codeOutputTab" data-action="output.view">Result</div>\n                            <div class="menu-button" id="instructionsTab" data-action="instructions.view"><i class="fa fa-list"></i> Instructions</div>\n                        </div>\n                        \n                        \x3c!-- when hiding instructions: withoutTabs --\x3e\n                        <div id="outputContainer" class="withTabs">\n                            <div id="graphic-wrap" class="hide">\n                                <div id="graphic" aria-label="Visual Output" role="application" tabindex="0"></div>\n                            </div>\n\n                            <div id="output-dragbar" class="hide" data-action="resize"></div>\n\n                            <div id="console-wrap" class="hide">\n                                <div id="console-output" aria-live="assertive" aria-label="Code Output"></div>\n                                <a id="reset-output" title="clear output"><i class="fa fa-ban"></i></a>\n                            </div>\n\n                            <div id="unittest-wrap" class="hide">\n                                <div id="unittest-output">\n                                    <div class="row grey collapse">\n                                        <div class="small-12 column">\n                                            <p class="text-center overview" id="test-totals"></p>\n                                        </div>\n                                    </div>\n                                    <ul class="accordion" id="unittest-accordion" data-accordion>\n                                    </ul>\n                                </div>\n                            </div>\n\n                        </div>\n\n                        <div id="instructionsContainer" class="hide">\n                            <div id="instructionsActions" class="">\n                                <a id="edit-instructions-link"><i class="fa fa-pencil hide" title="Edit"></i></a>\n                            </div>\n                            <div id="instructionsToolbar" class="hide">\n                                <a class="right" id="save-instructions"><i class="fa fa-save" title="Save"></i></a>\n                                <a id="cancel-edit-instructions"><i class="fa fa-times" title="Cancel"></i></a>\n                            </div>\n\n                            <div id="instructionsOutput"></div>\n                        </div>\n\n                    </div>\n\n                </div>\n            </section>\n\n        </div>\n    </div>\n  \n    <script id="statusMessageTemplate" type="text/html">\n        <div id="statusMessages" aria-live="assertive" role="alert" tabindex=0 data-inteface="alert" data-alert class="alert-box {{type}}">\n            <div>{{message}}</div>\n            <a href="b7b06252f4.html#" title="Close message" class="close" aria-label="Close Alert" role="button"><i class="fa fa-times-circle"></i></a>\n        </div>\n    <\/script>\n    <div id="content-overlay" class="hide"></div>\n\n    \x3c!-- the response-indicator divs allow javascript to determine which responsive size is being applied --\x3e\n    <div class="responsive-indicator show-for-small-only" data-size="small"></div>\n    <div class="responsive-indicator show-for-medium-only" data-size="medium"></div>\n    <div class="responsive-indicator show-for-large-up" data-size="large"></div>\n\n    <div id="confirmResetModal" class="reveal-modal medium" data-reveal data-css-top="35">\n        <div class="row">\n            <h2 id="modalTitle">Are you sure?</h2>\n            <p class="lead">Resetting will undo all of your changes since this gadget was initially loaded.</p>\n            <a class="button caution menu-button allow-original" data-action="code.cancel-reset">Cancel</a>\n            <a class="button danger menu-button allow-original" data-action="code.confirm-reset">Yes, I am sure.</a>\n            <a class="close-reveal-modal" aria-label="Close">&#215;</a>\n        </div>\n    </div>\n\n    <div id="badBrowser" class="reveal-modal medium" data-reveal data-css-top="35">\n        <div class="row">\n            <h2 id="modalTitle">Stop!</h2>\n            <p class="lead">Internet Explorer is not supported. Try Firefox, Chrome, or Edge. </p>\n            <a class="close-reveal-modal" aria-label="Close">&#215;</a>\n        </div>\n    </div>\n\n    <ul id="run-options" class="f-dropdown" data-dropdown-content>\n        <li><a class="menu-button" data-action="code.run" data-button="run"><i class="fa fa-play"></i>Run</a></li>\n        <li><a class="menu-button" data-action="code.console" data-button="console"><i class="fa fa-terminal"></i>Console</a></li>\n        <li><a class="menu-button" data-action="code.debug"><i class="fa fa-bug"></i>Debug</a></li>\n    </ul>\n\n    <script id="unittest-error" type="text/template">\n        <li class="accordion-navigation">\n            <a href="b7b06252f4.html#panel-{{testNumber}}">\n                <div class="really-wrong">\n                    <div class="col-md-10">\n                        <p><i class="fa fa-angle-right fa-lg open-close-indicator"></i>{{shortDescription}}</p>\n                    </div>\n                    <div class="col-md-2">\n                        <p class="text-center"><i class="fa fa-circle-o fa-lg"></i></p>\n                    </div>\n                </div>\n            </a>\n            <div id="panel-{{testNumber}}" class="content">\n                <p>\n                    <strong>Message:</strong> <pre>{{reason}}</pre>\n                </p>\n            </div>\n        </li>\n    <\/script>\n\n    <script id="unittest-fail" type="text/template">\n        <li class="accordion-navigation">\n            <a href="b7b06252f4.html#panel-{{testNumber}}">\n                <div class="really-wrong">\n                    <div class="col-md-2">\n                        <p><i class="fa fa-circle-o fa-lg"></i></p>\n                    </div>\n                    <div class="col-md-9 column">\n                        <p>{{shortDescription}}</p>\n                    </div>\n                </div>\n            </a>\n            <div id="panel-{{testNumber}}" class="content">\n                <p>\n                    {{description}} \n                    {{reason}}\n                </p>\n            </div>\n        </li>\n    <\/script>\n\n    <script id="unittest-pass" type="text/template">\n        <li class="accordion-navigation">\n            <div class="really-right">\n              <div class="md-2">\n                <p><i class="fa fa-check-circle fa-lg"></i></p>\n              </div>\n              <div class="md-10 column">\n                <p>{{shortDescription}}</p>\n              </div>\n            </div>\n        </li>\n    <\/script>\n\n    <script id="draftTextTemplate" type="text/html">\n        <a class="menu-button" data-action="code.reset" title="Reset"><i class="fa fa-refresh"></i></a> {{draftText}}\n    <\/script>\n\n    <script id="addInstructionsTemplate" type="text/html">\n        <p>Click the pencil icon to add instructions to your gadget. When anyone else views this gadget, they\'ll also be able to view them.</p>\n    <\/script>\n\n    <script id="editInstructionsTemplate" type="text/html">\n        <div id="embedded-instructions"></div>\n    <\/script>\n\n    \x3c!--[if IE]>\n    <script src="/cache-prefix-1528245195812dist/jszip-utils-ie.min.js" type="text/javascript"><\/script>\n    <![endif]--\x3e\n  \n    <script src=\'libs/file-saver.js/1.20150507.2/FileSaver.js\'><\/script>\n    <script src=\'libs/lodash/2.4.1/dist/lodash.min.js\'><\/script>\n    <script src=\'libs/bluebird/3.5.1/js/browser/bluebird.min.js\'><\/script>\n    <script src="libs/moment.js/2.18.1/moment.min.js" type="text/javascript"><\/script>\n    <script src=\'libs/ace-builds/v1.2.6.1rc2/src-min-noconflict/ace.js\'><\/script>\n    <script src=\'libs/ace-builds/v1.2.6.1rc2/src-min-noconflict/ext-modelist.js\'><\/script>\n    <script src=\'libs/ace-builds/v1.2.6.1rc2/src-min-noconflict/ext-language_tools.js\'><\/script>\n    <script type="text/javascript" src="libs/skulpt/skulpt.min.js"><\/script>\n    <script type="text/javascript" src="libs/skulpt/skulpt-stdlib.js"><\/script>\n    <script src="libs/marked/lib/marked.js"><\/script>\n    <script src="libs/traqball.js/src/traqball.js"><\/script>\n    <script src="libs/jquery/3.3.1/jquery.min.js"><\/script>\n    <script src="libs/jqueryui/1.12.1/jquery-ui.min.js"><\/script>\n    <script src="libs/highlight.js/8.0/highlight.min.js"><\/script>\n    <script src="js/markdown.js"><\/script>\n    <script src="js/gadget.js" type="text/javascript"><\/script>\n    <script src="js/configure.js" type="text/javascript"><\/script>\n</body>\n</html>\n'),a.contentDocument.close()})}}),n.removed("div.gadget",e=>{e.config&&(s()(e.config.iframeElement).remove(),e.config=null)}),n.disappeared("div.gadget",e=>{e.config&&s()(e.config.iframeElement).hide()})})(e,(e,t)=>{if(e.classList.contains("personal"))if(console.log("rendering personal gadget"),e.id){e.config.admin=!0;const n="/users/"+ENV.current_user.id,i=`gadgets/${e.id}.gadget`;e.config.save=e=>{console.log("saving personal gadget ...");const t=e.toElement().innerHTML;return l(n,i,t)},c(n,i).then(t=>e.innerHTML=t,console.log).finally(t)}else console.log("can't render a personal gadget without an id!");else if(e.matches("body#tinymce .gadget"))console.log("rendering gadget within tinymce editor"),e.config.admin=!0,e.config.show="code",e.config.edit=t=>{e.innerHTML=t.toElement().innerHTML},t();else if(e.matches("#questions.assessing .gadget")){console.log("rendering gadget within a quiz"),e.config.show="instructions";const n=s()(e).closest(".question");n.find(".answers").hide();const i=n.find(".question_input");if(e.config.edit=e=>{tinymce.get(i.attr("id")).setContent(e.toHTML()),tinymce.triggerSave()},i.val()){const t=s()(i.val()).get(0);e.innerHTML=t.innerHTML}t()}else if(e.matches("#questions.assessment_results .gadget")){console.log("rendering gadget in a quiz submission"),e.config.show="tests";const n=ENV.current_user_roles;n.includes("teacher")||n.includes("admin")?e.config.show_tabs=!0:e.config.readonly=!0,s()(e).closest(".question").find(".question_text").hide(),t()}else e.matches("#questions.question_editing .gadget")?(console.log("rendering gadget in the quiz editor"),e.config.show="instructions",e.config.readonly=!0,t()):e.matches("#ic-QuizInspector__QuestionInspector .gadget")?(console.log("rendering gadget in the activity stream"),e.config.show="tests",s()("button:contains('View HTML')").click()):t()}),!1))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,